// api/create-payment.js
export default async function handler(req, res) {
  console.log('üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞');
  
  if (req.method !== 'POST') {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
    const SHOP_ID = process.env.YOOKASSA_SHOP_ID;
    const SECRET_KEY = process.env.YOOKASSA_SECRET_KEY;

    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π...');
    console.log('SHOP_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!SHOP_ID);
    console.log('SECRET_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!SECRET_KEY);

    if (!SHOP_ID || !SECRET_KEY) {
      console.error('‚ùå –ö–ª—é—á–∏ –ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
      return res.status(500).json({ 
        error: 'YooKassa credentials not configured',
        message: '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–ª—é—á–∏ –æ–ø–ª–∞—Ç—ã'
      });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∫–ª—é—á
    const idempotenceKey = `${Date.now()}_${Math.random().toString(36).substring(7)}`;
    console.log('üîë –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π –∫–ª—é—á:', idempotenceKey);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const paymentData = {
      amount: req.body.amount,
      confirmation: req.body.confirmation,
      capture: req.body.capture || true,
      description: req.body.description,
      metadata: req.body.metadata || {}
    };

    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ÆKassa:', JSON.stringify(paymentData, null, 2));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ÆKassa
    const yookassaResponse = await fetch('https://api.yookassa.ru/v3/payments', {
      method: 'POST',
      headers: {
        'Authorization': 'Basic ' + Buffer.from(`${SHOP_ID}:${SECRET_KEY}`).toString('base64'),
        'Idempotence-Key': idempotenceKey,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(paymentData)
    });

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', yookassaResponse.status);
    console.log('üì° Headers –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', yookassaResponse.headers);

    const responseText = await yookassaResponse.text();
    console.log('üì° –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –ÆKassa:', responseText);

    let result;
    try {
      result = JSON.parse(responseText);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –ÆKassa:', parseError);
      return res.status(500).json({
        error: 'Invalid response from YooKassa',
        message: '–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã'
      });
    }

    if (!yookassaResponse.ok) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ÆKassa:', result);
      return res.status(yookassaResponse.status).json({
        error: 'YooKassa API error',
        message: result.description || result.error_description || '–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã',
        details: result
      });
    }

    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ÆKassa:', JSON.stringify(result, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!result.confirmation) {
      console.error('‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç confirmation');
      return res.status(500).json({
        error: 'Missing confirmation in response',
        message: '–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã'
      });
    }

    res.status(200).json(result);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API:', error);
    res.status(500).json({ 
      error: 'Internal server error',
      message: error.message,
      stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
}
